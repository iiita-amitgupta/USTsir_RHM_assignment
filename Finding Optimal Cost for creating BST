/********************************************************************************
 *         Finding Optimal Cost for Constructing Binary Search Tree             *
 * ******************************************************************************/



#include <stdio.h>
#include <limits.h>

int sum(int freq[], int i, int j);
int OptimalBST(int keys[], int freq[], int n);

int main()
{
	int i;
	int n;
	int value;

	printf("Enter number of inputs want to enter: ");
	scanf("%d", &n);

	int arr[n];
	int freq[n];
	printf("Enter the values: ");
	for(i = 0; i < n; i++) {
		scanf("%d", &value);
		arr[i] = value;
	}

	printf("Enter the frequencies of the values: ");
	for(i = 0; i < n; i++) {
		scanf("%d", &value);
		freq[i] = value;
	}

	value = OptimalBST(arr, freq, n);

	printf("The Optimal Cost for constructing the BST is: %d\n", value);

	return 0;
}

int OptimalBST(int keys[], int freq[], int n)
{ 

	int cost[n][n];
	int i;
	int c;
	int k;
	int r;
	int j;

	for (i = 0; i < n; i++) {	
		cost[i][i] = freq[i];
	}

	for (k = 2; k <= n; k++) {

		for (i = 0; i <= n - k + 1; i++) {
			j = i + k - 1;
			cost[i][j] = INT_MAX;

			for (r = i; r <= j; r++) {

				c = ((r > i)? cost[i][r-1]:0) + ((r < j)? cost[r+1][j]:0) + sum(freq, i, j);
				if (c < cost[i][j])
					cost[i][j] = c;
			}
		}
	}
	return cost[0][n-1];
}

int sum(int freq[], int i, int j)
{ 
	int s;
	int k;
	for (s = 0, k = i; k <=j; k++){
		s = s + freq[k];
	}

	return s;
} 
